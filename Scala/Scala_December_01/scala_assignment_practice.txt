//Assignment
1.   Think of as many ways as you can to make an Array[Int] that has the values 1-10 in it. Write them all to test that they work. The first two should be easy. If you work you can get at least three others.
Code:
package scalaPractice

import scala.collection.mutable.ArrayBuffer

object Assignment {
  def main(args: Array[String]): Unit = {

    val arr1=new Array[Int](5);
    for(i<-0 until(5)){
      arr1(i)=i+2
    }
    println("first array: "+arr1.mkString(", "));

    val arr2=Array(1,2,3,4,5,6,7);
    println("Second array: "+arr2.mkString(", "));

    val arr3=(1 to 10).toArray;
    println("Third Array: "+arr3.mkString(", "));

    var bfArray=ArrayBuffer[Int]();
    bfArray+=1;
    bfArray+=2;
    bfArray+=3;
    val arr4=bfArray.toArray;
    println("Fourth Array: "+arr4.mkString(", "));

    var arr5=Array.fill(5)(2);
    println("Fifth Array: "+arr5.mkString(", "));

  }
}



2.   Make a List[Char] that contains ’a’-’z’ without typing in all the characters. (Use toChar to make this work.)
Code:
package scalaPractice

object Assignment {
  def main(args:Array[String]):Unit={
    val myList=(97 to 122).map(_.toChar).toList
    println(myList);
  }
}



3.   Write a function that takes a number of values and returns the average excluding the largest and smallest values.
Code:
package scalaPractice

import scala.io.StdIn.readInt

object Assignment {

  def calAverage(arr:Array[Int]):Double={
  
    var sum = 0;
    val mini = arr.min;
    val maxi = arr.max;
    var count=0;
    arr.foreach(ele =>
      if (ele != maxi && ele != mini) {
        sum += ele
        count+=1
      }
    )
	
	if(count==0){
		return 0.0;
	}
	else{
		return sum.toDouble / count
	}

    


  }

  def main(args:Array[String]):Unit={

    println("Enter numbers of elements you want");
    val n=readInt();

    println("Enter array values: ");
    val myArray=Array.fill(n)(readInt);

    println(s"Average excluding extreme: ${calAverage(myArray)}");


  }
}

4.   Write a function that takes a sequence (List or Array) of grades and returns the average with the lowest two grades dropped. Make sure this function behaves reasonably even for smaller input sets.
Code:
package scalaPractice

import scala.io.StdIn.readInt


object Assignment {

  def calculateAverage(grades:List[Int]):Double={
    var sum=0.0;
    val sortedList = grades.toSet.toList.sorted
    val firstLowest = sortedList.head;
    val secondLowest=sortedList(1);

    val filteredData=grades.filter(x => {
      x != firstLowest && x != secondLowest
    })
    val total=filteredData.sum.toDouble;
    val count=filteredData.length;

    if(count==0){
      return 0.0;
    }
    else{
      return total/count;
    }

  }
  def main(args:Array[String]):Unit={
      println("Enter number of grades: ");
      val n=readInt;
      println("Enter the grades: ");
      val grades=List.fill(n)(readInt());

      println("Average of grades after excluding first and second lowest: "+calculateAverage(grades));

  }
}


5.   Write a script that reads in a number of integers between 1 and 100 and stores them in a list and then counts the number of times each number occurs.
Code:
package scalaPractice

import scala.io.StdIn.readInt

object Assignment {

  def countOccurence(lst:List[Int]):scala.collection.mutable.HashMap[Int,Int]={
      var map=scala.collection.mutable.HashMap[Int,Int]();

      lst.foreach(ele=>{
        if(map.contains(ele)){
          map(ele)+=1

        }
        else{
          map+=(ele->1);
        }
      })
      map

  }

  def main(args:Array[String]):Unit={

    println("Enter numbers of elements you want");
    val n=readInt();

    println("Enter List values: ");
    val myList=List.fill(n)(readInt);


    val myMap=countOccurence((myList));
    println("number   no. of occurences");
    for(key<-myMap.keys){
      println(s"${key}       ${myMap(key)}");

    }


  }
}

6.   Write a function that produces a sequence of prime numbers. The function should take an argument for how many prime numbers need to be in the list.
Code:
package scalaPractice

import scala.io.StdIn.readInt
import scala.util.control.Breaks.{break, breakable}


object Assignment {


  def isPrime(ele: Int):Boolean={
    for(i<-2 to ele){
        if(ele%i==0 && i!=ele){
          return false
        }
    }
    return true
  }

  def primeCollection(m:Int):scala.collection.mutable.ListBuffer[Int]={
    var n=m
    var lst = scala.collection.mutable.ListBuffer[Int]();
    breakable{
      for (ele <- 2 to Int.MaxValue) {
        if (isPrime(ele)) {
          lst += ele
          n -= 1;
          if(n==0||(n>=0 && ele==Int.MaxValue)){
            break;
          }
        }
      }
    }
    return lst
  }
  def main(args:Array[String]):Unit={
      println("Enter number of prime numbers: ");
      val n=readInt

      println("Prime Numbers List: "+primeCollection(n).toList);

  }
}



7.   Write a script that reads in a series of numbers from the user and stores them in a list. Then pass this list to a function that will remove all of the duplicates in the list. Print out the list to make sure that all duplicates were removed.
Code:
package scalaPractice

import scala.io.StdIn.readInt

object Assignment {

  def removeDuplicates(lst:List[Int]):List[Int]={
    lst.toSet.toList
  }


  def main(args:Array[String]):Unit={

    println("Enter numbers of elements you want");
    val n=readInt();

    println("Enter List values: ");
    val myList=List.fill(n)(readInt);

    println("Original List: "+myList);

    val res=removeDuplicates(myList);

    println("List After duplicate removed: "+res);




  }
}



8.   Write a function that takes a number of values and returns the average excluding the largest and smallest values.
Code:
package scalaPractice

import scala.io.StdIn.readInt

object Assignment {

  def calAverage(arr:Array[Int]):Double={
    var sum = 0;
    val mini = arr.min;
    val maxi = arr.max;
    var count=0;
    arr.foreach(ele =>
      if (ele != maxi && ele != mini) {
        sum += ele
        count+=1
      }
    )

	if(count==0){
		return 0.0;
	}
	else{
		return sum.toDouble / count
	}


  }

  def main(args:Array[String]):Unit={

    println("Enter numbers of elements you want");
    val n=readInt();

    println("Enter array values: ");
    val myArray=Array.fill(n)(readInt);

    println(s"Average excluding extreme: ${calAverage(myArray)}");


  }
}

//leetcode
9.You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Code:
object Solution {
    def maxArea(height: Array[Int]): Int = {
        var i=0;
        var j=height.length-1;
        
        var maxArea=0
        while(i<j){
            maxArea=maxArea max ((height(i) min height(j))*(j-i));
            if(height(i)<height(j)){
                i+=1;
            }

            else{
                j-=1;
            }
        }   
        return maxArea;
    }
}

10.Given a string s, find the length of the longest substring without repeating characters.
Code:
import scala.util.control.Breaks.{break, breakable}
object Solution {
    def lengthOfLongestSubstring(s: String): Int = {
      
        val str= s;
        var maxlen=0;
        for(i<-0 to  (str.length-1)){
            var map=scala.collection.mutable.HashMap[Char,Int]();
            breakable {
                for (j <- i until (str.length)) {
                    if (map.contains(str.charAt(j))) {
                        
                        break;
                    }
                    else {
                        map += (str.charAt(j) -> 1);
                    }
                }
                
            }
            maxlen=(map.size) max maxlen;
        }

        return maxlen;

    }
}

11.Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Code:
object Solution {
    def sortColors(nums: Array[Int]): Unit = {
        var mid=0;
        var low=0;
        var high=nums.length-1;

        while(mid<=high){
            if(nums(mid)==0){
                var temp=nums(mid);
                nums(mid)=nums(low);
                nums(low)=temp;
                low+=1;
                mid+=1;
            }
            else if( nums(mid)==1){
                mid+=1;
            }
            else{
                var temp=nums(mid);
                nums(mid)=nums(high);
                nums(high)=temp;
                high-=1;
            }
        }
        
    }
}

